## Script (Python) "file_edit"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=precondition='', file='', id='', title=None, description=None, file_data=''
##title=Edit a file
##
from StringIO import StringIO
REQUEST=context.REQUEST
isIDAutogenerated=context.isIDAutoGenerated
original_id=context.getId()

# if there is no id or an autogenerated id, use the filename as the id
# if not id or context.isIDAutoGenerated(id):
# 

filename=getattr(file,'filename', '')
if file and filename and isIDAutogenerated(original_id):
    if not id:
        id = filename[max( string.rfind(filename, '/')
                       , string.rfind(filename, '\\')
                       , string.rfind(filename, ':') )+1:]
    file.seek(0)

if not id:
    id = original_id

if not file and file_data:
    #If someone is editing text-file through the edit form
    file=StringIO(file_data)

new_context = context.portal_factory.doCreate(context, id)

#XXX contentEdit was called after .edit for some edge-case
#    but sometimes in subclasses edit of files (such as ExternalFile)
#    we need to know the new id (which we figure out above)
new_context.plone_utils.contentEdit( new_context
                                   , id=id
                                   , description=description )

new_context.edit( precondition=precondition
                , file=file )

return ('success', new_context, 
        {'portal_status_message':REQUEST.get('portal_status_message', 
                                             'File changes saved.')})

